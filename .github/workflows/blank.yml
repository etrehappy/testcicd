# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: self-hosted

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      - name: Link local project (Windows junction)
        run: |
          rmdir /S /Q "%GITHUB_WORKSPACE%\ProjectCiCdTest" || true
          mklink /J "%GITHUB_WORKSPACE%\ProjectCiCdTest" "%UE_Projects%\TestCiCd"
        shell: cmd

      - name: Check if project files changed
        id: changes
        shell: pwsh
        run: |
          # Попытка определить "базовую" ветку для сравнения:
          $base = $env:GITHUB_BASE_REF
          if (-not $base -or $base -eq '') {
            # если нет GITHUB_BASE_REF (workflow_dispatch или push), попробуем получить имя ветки из GITHUB_REF
            if ($env:GITHUB_REF -and $env:GITHUB_REF -match 'refs/heads/(.+)$') {
              $base = $Matches[1]
            } else {
              # запасной вариант — использовать main (подставьте вашу основную ветку, если она отличается)
              $base = 'main'
            }
          }

          Write-Host "Base branch for comparison: $base"

          # Забираем конкретную ветку из origin (гарантируем, что origin/$base существует)
          git fetch origin $base --depth=1

          # Выполняем diff между origin/<base> и текущим HEAD
          git diff --name-only origin/$base HEAD | Out-File -FilePath changed_files.txt -Encoding utf8

          Write-Host "Changed files:"
          Get-Content changed_files.txt | ForEach-Object { Write-Host $_ }

          # Ищем изменения в интересующих путях (регэксп, Windows-стиль путей)
          $pattern1 = '^CiCdProject/Source/'
          $pattern2 = '^CiCdProject/Config/'

          $hasChanges = Select-String -Path "changed_files.txt" -Pattern $pattern1, $pattern2 -Quiet

          if ($hasChanges) {
            Write-Host "Project files changed."
            echo "changed=true" >> $env:GITHUB_OUTPUT
          } else {
            Write-Host "No project changes detected."
            echo "changed=false" >> $env:GITHUB_OUTPUT
          }

      
      - name: Build Development Editor (Win64)
        shell: cmd
        run: |
          set UE_BUILD_BAT="%UE_git_5_6%\Build\BatchFiles\Build.bat"
          set TARGET=CiCdProjectEditor Win64 Development
          set UPROJ="%GITHUB_WORKSPACE%\CiCdProject\CiCdProject.uproject"
          %UE_BUILD_BAT% %TARGET% %UPROJ% -waitmutex -NoHotReload


      - name: Run Automation Tests
        shell: cmd
        run: |
          "%UE_git_5_6%\Binaries\Win64\UnrealEditor-Cmd.exe" ^
            "%GITHUB_WORKSPACE%\CiCdProject\CiCdProject.uproject" ^
            -nosplash -unattended -nullrhi ^
            -ExecCmds="Automation RunTests TrainingTests.Simple;Quit" ^
            -ReportExportPath="%GITHUB_WORKSPACE%\TestReports" ^
            -log


      - name: Check test reports (fail on test fail)
        shell: pwsh
        run: |
          $reportDir = "$env:GITHUB_WORKSPACE\TestReports"
          $jsonFiles = Get-ChildItem -Path $reportDir -Recurse -Include *.json
          if (-not $jsonFiles) {
            Write-Error "No JSON report files found"
            exit 1
          }

          $failedTotal = 0
          foreach ($file in $jsonFiles) {
            $data = Get-Content $file.FullName -Raw | ConvertFrom-Json
            if ($data.failed -gt 0) {
              Write-Host "Test run failed: $($data.failed) tests failed."
              $failedTotal += $data.failed
            }
            foreach ($test in $data.tests) {
              if ($test.state -ne "Success") {
                Write-Host "Test '$($test.fullTestPath)' failed with state: $($test.state)"
                $failedTotal++
              }
            }
          }

          if ($failedTotal -gt 0) {
            Write-Error "$failedTotal tests failed."
            exit 1
          } else {
            Write-Host "All tests passed."
          }


      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.
