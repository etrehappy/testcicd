# This is a basic workflow to help you get started with Actions

name: CI

on:
  workflow_dispatch:

env:
  BUILD_CONFIG: Development #Shipping
  BUILD_TARGET_NAME: CiCdProjectEditor #CiCdProject CiCdProjectClient CiCdProjectServer
  BUILD_PLATFORM: Win64  
  PROJECT_NAME: CiCdProject
  SHOULD_BUILDING: "true"



jobs: 
  build:
    runs-on: self-hosted
    
    defaults:
      run:
        shell: pwsh
        # working-directory: ${{ env.RUNNER_PROJECT_DIR }} /*! It will declaration on the next step*/

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      #- uses: actions/checkout@v4

      - name: Set multiple env variables        
        run: |
          $basePath = "$env:UE_Projects\TestCiCd"

          $vars = @{
            RUNNER_REPO_DIR = $basePath
            RUNNER_PROJECT_DIR = "$basePath\$env:PROJECT_NAME"
            RUNNER_BUILD_BAT = "$env:UE_git_5_6\Build\BatchFiles\Build.bat"
            RUNNER_UPROJECT_PATH = "$env:RUNNER_PROJECT_DIR\$env:PROJECT_NAME.uproject"         
          }

          foreach ($key in $vars.Keys) {
            "$key=$($vars[$key])" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          } 
 
      - name: Check if project files changed
        id: changes
        working-directory: ${{ env.RUNNER_PROJECT_DIR }} 
        run: |             
          # sets branch name for check
          $branch = if ($env:GITHUB_EVENT_NAME -eq 'pull_request') {
                      $env:GITHUB_BASE_REF
                  } else {
                      $env:GITHUB_REF -replace '^refs/heads/', ''
                  }

          Write-Host "Event: $env:GITHUB_EVENT_NAME, Branch: $branch"

          $changedFiles = git diff --name-only HEAD^..HEAD

          Write-Host "Changed files:"
          $changedFiles | ForEach-Object { Write-Host "  $_" }

          $found = $false
          foreach ($f in $changedFiles) {
            if ($f -match '(^|/)(Source|Config)/') {
              Write-Host "Matched: $f"
              $found = $true
              break
            }
          }

          if ($found) {
            echo "changed=true" >> $env:GITHUB_OUTPUT
          } else {
            echo "changed=false" >> $env:GITHUB_OUTPUT
          }


      - name: Build Development Editor (Win64)
        if: steps.changes.outputs.changed == 'true' && ${{ env.SHOULD_BUILDING }} == "true"
        run: |  
          & $env:RUNNER_BUILD_BAT $env:BUILD_TARGET_NAME $env:BUILD_PLATFORM $env:BUILD_CONFIG $env:RUNNER_UPROJECT_PATH -waitmutex -NoHotReload


      # - name: Run Automation Tests
      #   shell: cmd
      #   run: |
      #     "%UE_git_5_6%\Binaries\Win64\UnrealEditor-Cmd.exe" ^
      #       "%GITHUB_WORKSPACE%\CiCdProject\CiCdProject.uproject" ^
      #       -nosplash -unattended -nullrhi ^
      #       -ExecCmds="Automation RunTests TrainingTests.Simple;Quit" ^
      #       -ReportExportPath="%GITHUB_WORKSPACE%\TestReports" ^
      #       -log


      # - name: Check test reports (fail on test fail)
      #   shell: pwsh
      #   run: |
      #     $reportDir = "$env:GITHUB_WORKSPACE\TestReports"
      #     $jsonFiles = Get-ChildItem -Path $reportDir -Recurse -Include *.json
      #     if (-not $jsonFiles) {
      #       Write-Error "No JSON report files found"
      #       exit 1
      #     }

      #     $failedTotal = 0
      #     foreach ($file in $jsonFiles) {
      #       $data = Get-Content $file.FullName -Raw | ConvertFrom-Json
      #       if ($data.failed -gt 0) {
      #         Write-Host "Test run failed: $($data.failed) tests failed."
      #         $failedTotal += $data.failed
      #       }
      #       foreach ($test in $data.tests) {
      #         if ($test.state -ne "Success") {
      #           Write-Host "Test '$($test.fullTestPath)' failed with state: $($test.state)"
      #           $failedTotal++
      #         }
      #       }
      #     }

      #     if ($failedTotal -gt 0) {
      #       Write-Error "$failedTotal tests failed."
      #       exit 1
      #     } else {
      #       Write-Host "All tests passed."
      #     }



